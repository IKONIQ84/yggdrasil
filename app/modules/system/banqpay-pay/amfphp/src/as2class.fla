
/**
 * This file generated by AMFPHP 1.0
 * You can get AMFPHP to generate code customized to your preferences
 * By modifying the /browser/templates/as2.tpl file
 */

import mx.remoting.*;
import mx.rpc.*;
import mx.utils.Delegate;
import mx.remoting.debug.NetDebug;

class pizzaService
{
	//Change the gateway URL as needed
	private var gatewayUrl:String = "http://www.banqpay.com/amfphp/gateway.php";
	private var service:Service;

	function pizzaService()
	{
		NetDebug.initialize();
		this.service = new Service(this.gatewayUrl, null, "pizzaService");
		
	}
	
		
	//Order is the remote method that places an order First argument is the name of the person who orders it Second argument is an array of pizzas, like so: [{quantity:3, details:'Some really good pizza with onions and anchovies'}]	
	function order(name, orders)
	{
		var pc:PendingCall = service.order(name, orders);
		pc.responder = new RelayResponder(this, "handleOrder", "handleRemotingError");
	}
		
	//cancelOrder takes an order id as it's input and then sets the order_status field to 0.	
	function cancelOrder(orderId)
	{
		var pc:PendingCall = service.cancelOrder(orderId);
		pc.responder = new RelayResponder(this, "handleCancelOrder", "handleRemotingError");
	}
		
	//getOrderList returns a recordset of all of the orders that have an order_status of 1	
	function getOrderList()
	{
		var pc:PendingCall = service.getOrderList();
		pc.responder = new RelayResponder(this, "handleGetOrderList", "handleRemotingError");
	}
		
	//listToppings returns the available toppings as an array	
	function listToppings()
	{
		var pc:PendingCall = service.listToppings();
		pc.responder = new RelayResponder(this, "handleListToppings", "handleRemotingError");
	}
		
		
	function handleOrder(re:ResultEvent)
	{
		//Implement custom callback code
	}
		
	function handleCancelOrder(re:ResultEvent)
	{
		//Implement custom callback code
	}
		
	function handleGetOrderList(re:ResultEvent)
	{
		//Implement custom callback code
	}
		
	function handleListToppings(re:ResultEvent)
	{
		//Implement custom callback code
	}
	
	function handleRemotingError( fault:FaultEvent ):Void 
	{
		NetDebug.trace({level:"None", message:"Error: " + fault.fault.faultstring });
	}
}
